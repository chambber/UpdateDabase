unit Test.UP.Table;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  //rtl
  TestFramework, System.Classes, System.SysUtils,
  //UP
  UP.Table, UP.Base, UP.Client, UP.Database;

type
  TUPFakeClient = class(TInterfacedObject, IUPClient)
  strict private
    FCommand: IUPCommand;
    FResult: IUPResult;
  public
    function ExecuteCommand(Command: IUPCommand): IUPResult;
    function Command: IUPCommand;
    function Result: IUPResult;
  end;

  TUPTest = class abstract(TTestCase)
  private
    FCredentials: IUPCredentials;
    FClient: IUPClient;
  public
    procedure SetUp; override;
    function Client: TUPFakeClient;
  end;

  TestIUPFields = class(TUPTest)
  published
    procedure TestGet;
    procedure TestDelete;
    procedure TestAdd;
    procedure TestImmutable;
  end;

  TestIUPTable = class(TUPTest)
  published
    procedure TestImmutableFields;
  end;

  TestIUPTables = class(TUPTest)
  published
    procedure TestGet;
    procedure TestDelete;
    procedure TestAdd;
    procedure TestImmutable;
  end;

implementation

{ TUPFakeClient }

function TUPFakeClient.Command: IUPCommand;
begin
  Result := FCommand;
end;

function TUPFakeClient.ExecuteCommand(Command: IUPCommand): IUPResult;
begin
  FCommand := Command;
  Result := TUPResult.New('OK');
end;

function TUPFakeClient.Result: IUPResult;
begin
  Result := FResult;
end;

{ TUPTest }

function TUPTest.Client: TUPFakeClient;
begin
  Result := FClient as TUPFakeClient;
end;

procedure TUPTest.SetUp;
begin
  inherited;
  FCredentials := TUPCredentials.New(
      'localhost/3051:E:\Bancos\OS 3776\WSAC.FDB',
      'SYSDBA',
      'masterkey',
      'FB'
  );
  FClient := TUPFakeClient.Create;
end;

{ TestIUPFields }

procedure TestIUPFields.TestAdd;
var
  vTables: IUPTables;
  vTable: IUPTable;
  vCommand: TStrings;
begin
  vTables := TUPTables.New(FClient);
  vTable := vTables.Get('TABELA');
  vCommand := TStringList.Create;
  vCommand.Text := 'ALTER TABLE TABELA ADD CAMPO INTEGER';
  try
    vTable.Fields.Add('CAMPO', TUPCommand.New(vCommand));
  finally
    vCommand.Free;
  end;
  CheckEquals('OK', Client.Result.MessageExecute);
end;

procedure TestIUPFields.TestDelete;
var
  vTables: IUPTables;
  vTable: IUPTable;
begin
  vTables := TUPTables.New(FClient);
  vTable := vTables.Get('TABELA');
  vTable.Fields.Delete('CAMPO');
  CheckEquals('OK', Client.Result.MessageExecute);
end;

procedure TestIUPFields.TestGet;
var
  vTables: IUPTables;
  vTable: IUPTable;
  vField: IUPField;
begin
  vTables := TUPTables.New(FClient);
  vTable := vTables.Get('TABELA');
  vField := vTable.Fields.Get('CAMPO');
  CheckEquals('OK', Client.Result.MessageExecute);
end;

procedure TestIUPFields.TestImmutable;
var
  vTables: IUPTables;
  vTable: IUPTable;
begin
  vTables := TUPTables.New(FClient);
  vTable := vTables.Get('TABELA');
  CheckSame(vTable.Fields, vTable.Fields);
end;

{ TestIUPTable }

procedure TestIUPTable.TestImmutableFields;
var
  vTables: IUPTables;
  vTable: IUPTable;
begin
  vTables := TUPTables.New(FClient);
  vTable := vTables.Get('TABELA');
  CheckNotNull(vTable.Fields, 'Fields not alive');
  CheckSame(vTable.Fields, vTable.Fields);
end;

{ TestIUPTables }

procedure TestIUPTables.TestAdd;
var
  vTables: IUPTables;
  vCommand: TStrings;
begin
  vTables := TUPTables.New(FClient);
  vCommand := TStringList.Create;
  vCommand.Text := 'CREATE TABLE TABELA(CAMPO INTEGER)';
  try
    vTables.Add('TABELA', TUPCommand.New(vCommand));
  finally
    vCommand.Free;
  end;
  CheckEquals('OK', Client.Result.MessageExecute);
end;

procedure TestIUPTables.TestDelete;
var
  vTables: IUPTables;
begin
  vTables := TUPTables.New(FClient);
  vTables.Delete('TABELA');
  CheckEquals('OK', Client.Result.MessageExecute);
end;

procedure TestIUPTables.TestGet;
var
  vTables: IUPTables;
  vTable: IUPTable;
begin
  vTables := TUPTables.New(FClient);
  vTable := vTables.Get('TABELA');
  CheckEquals('OK', Client.Result.MessageExecute);
end;

procedure TestIUPTables.TestImmutable;
var
  vTables: IUPTables;
  vTable: IUPTable;
begin
  vTables := TUPTables.New(FClient);
  vTable := vTables.Get('TABELA');
  CheckSame(vTables, vTable.Fields);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestIUPFields.Suite);
  RegisterTest(TestIUPTable.Suite);
  RegisterTest(TestIUPTables.Suite);

end.

